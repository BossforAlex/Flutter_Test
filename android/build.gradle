buildscript {
    ext.kotlin_version = '1.8.22'
}

/**
 * Early-phase namespace injection for AGP 8+: ensure third-party library modules have android.namespace.
 */
gradle.beforeProject { Project p ->
    try {
        if (p.name == 'amap_flutter_location' &&
            p.plugins.hasPlugin('com.android.library') &&
            p.hasProperty('android') &&
            (!p.android.hasProperty('namespace') || p.android.namespace == null)) {
            p.android.namespace = 'com.amap.flutter.location'
            println("Early applied namespace 'com.amap.flutter.location' to :amap_flutter_location")
        }
    } catch (Exception ignored) {}
}
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://storage.googleapis.com/download.flutter.io' }
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://storage.googleapis.com/download.flutter.io' }
        google()
        mavenCentral()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    project.evaluationDependsOn(':app')
}

/**
 * Inject namespace for third-party Android library modules that miss it under AGP 8+.
 * This avoids editing plugin source under .pub-cache.
 */
subprojects { subproject ->
    subproject.afterEvaluate {
        try {
            if (subproject.name == "amap_flutter_location" &&
                subproject.plugins.hasPlugin("com.android.library") &&
                subproject.hasProperty("android") &&
                ( !subproject.android.hasProperty("namespace") || subproject.android.namespace == null )
            ) {
                subproject.android.namespace = "com.amap.flutter.location"
                println("Applied namespace 'com.amap.flutter.location' to :amap_flutter_location")
            }
        } catch (Exception ignored) {
            // no-op
        }
    }
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}